from pathlib import Path
from typing import List, Tuple

answers = [
    426,
    985,
    841,
    463,
    633,
    17,
    531,
    125,
    312,
    895,
    998,
    353,
    21,
    727,
    545,
    272,
    743,
    558,
    577,
    486,
    186,
    925,
    483,
    883,
    1,
    286,
    474,
    491,
    243,
    287,
    830,
    793,
    306,
    807,
    28,
    947,
    705,
    573,
    500,
    781,
    496,
    989,
    923,
    713,
    539,
    917,
    115,
    662,
    413,
    886,
    398,
    636,
    976,
    413,
    498,
    266,
    87,
    969,
    881,
    815,
    279,
    415,
    728,
    670,
    890,
    760,
    832,
    227,
    632,
    212,
    257,
    712,
    491,
    41,
    373,
    742,
    330,
    415,
    406,
    441,
    35,
    828,
    239,
    533,
    206,
    834,
    448,
    467,
    244,
    332,
    35,
    453,
    616,
    609,
    662,
    672,
    56,
    602,
    549,
    661,
    141,
    73,
    699,
    904,
    189,
    677,
    473,
    670,
    938,
    267,
    684,
    514,
    211,
    875,
    667,
    171,
    110,
    426,
    29,
    164,
    786,
    646,
    885,
    996,
    117,
    28,
    921,
    150,
    635,
    973,
    587,
    346,
    771,
    3,
    962,
    821,
    174,
    391,
    732,
    177,
    101,
    146,
    555,
    117,
    965,
    127,
    354,
    37,
    656,
    747,
    967,
    469,
    450,
    560,
    553,
    327,
    215,
    950,
    253,
    267,
    946,
    583,
    727,
    337,
    316,
    680,
    982,
    398,
    961,
    632,
    718,
    599,
    876,
    700,
    617,
    344,
    138,
    907,
    291,
    209,
    860,
    850,
    761,
    721,
    804,
    33,
    61,
    378,
    268,
    956,
    813,
    191,
    610,
    168,
    216,
    853,
    826,
    757,
    422,
    427,
    908,
    172,
    464,
    131,
    939,
    456,
    462,
    985,
    933,
    641,
    874,
    189,
    42,
    430,
    596,
    945,
    456,
    23,
    335,
    889,
    557,
    810,
    382,
    532,
    704,
    796,
    46,
    929,
    433,
    617,
    792,
    386,
    575,
    859,
    993,
    334,
    296,
    513,
    36,
    267,
    186,
    443,
    474,
    897,
    215,
    346,
    100,
    812,
    47,
    444,
    128,
    196,
    705,
    980,
    932,
    122,
    305,
    817,
    424,
    40,
    193,
    210,
    736,
    512,
    326,
    615,
    472,
    350,
    201,
    681,
    902,
    330,
    907,
    303,
    140,
    112,
    93,
    875,
    339,
    361,
    730,
    540,
    498,
    170,
    241,
    201,
    359,
    42,
    561,
    528,
    570,
    125,
    379,
    707,
    285,
    770,
    253,
    515,
    45,
    946,
    155,
    573,
    103,
    24,
    179,
    275,
    134,
    963,
    444,
    801,
    656,
    796,
    524,
    84,
    433,
    997,
    122,
    500,
    711,
    447,
    80,
    992,
    894,
    183,
    492,
    955,
    222,
    519,
    373,
    304,
    151,
    691,
    655,
    223,
    37,
    221,
    859,
    929,
    398,
    591,
    134,
    960,
    264,
    508,
    118,
    449,
    907,
    791,
    239,
    248,
    531,
    696,
    741,
    50,
    174,
    506,
    809,
    796,
    906,
    17,
    51,
    520,
    198,
    781,
    253,
    957,
    222,
    216,
    513,
    959,
    638,
    312,
    172,
    318,
    514,
    239,
    923,
    852,
    414,
    104,
    221,
    116,
    712,
    346,
    475,
    745,
    109,
    202,
    957,
    353,
    171,
    468,
    906,
    593,
    592,
    316,
    251,
    179,
    904,
    365,
    331,
    541,
    856,
    412,
    844,
    877,
    871,
    416,
    810,
    685,
    776,
    969,
    158,
    319,
    681,
    780,
    428,
    650,
    241,
    123,
    826,
    688,
    983,
    723,
    892,
    270,
    234,
    443,
    970,
    314,
    588,
    225,
    496,
    732,
    344,
    644,
    413,
    997,
    553,
    87,
    282,
    943,
    866,
    563,
    910,
    267,
    421,
    739,
    251,
    169,
    605,
    52,
    761,
    762,
    335,
    842,
    44,
    528,
    77,
    201,
    597,
    896,
    543,
    76,
    707,
    8,
    982,
    894,
    310,
    986,
    54,
    854,
    553,
    192,
    127,
    566,
    768,
    850,
    970,
    835,
    874,
    663,
    65,
    947,
    539,
    12,
    947,
    485,
    749,
    34,
    922,
    947,
    598,
    880,
    723,
    791,
    18,
    165,
    388,
    863,
    132,
    184,
    973,
    226,
    618,
    154,
    240,
    297,
    429,
    625,
    672,
    619,
    641,
    520,
    918,
    390,
    502,
    789,
    984,
    933,
    838,
    240,
    400,
    288,
    196,
    109,
    749,
    513,
    751,
    881,
    905,
    643,
    608,
    190,
    993,
    109,
    368,
    123,
    98,
    501,
    691,
    410,
    126,
    92,
    546,
    219,
    18,
    70,
    296,
    987,
    235,
    8,
    828,
    551,
    153,
    883,
    833,
    287,
    427,
    377,
    428,
    910,
    448,
    598,
    334,
    53,
    619,
    589,
    723,
    832,
    705,
    794,
    686,
    192,
    970,
    612,
    546,
    98,
    942,
    941,
    223,
    686,
    665,
    396,
    210,
    408,
    322,
    839,
    557,
    521,
    170,
    166,
    390,
    100,
    921,
    984,
    450,
    639,
    296,
    372,
    760,
    266,
    600,
    999,
    906,
    469,
    250,
    422,
    643,
    911,
    494,
    355,
    159,
    848,
    676,
    35,
    81,
    544,
    67,
    159,
    747,
    29,
    430,
    232,
    199,
    587,
    331,
    158,
    29,
    477,
    922,
    388,
    510,
    68,
    621,
    977,
    889,
    879,
    389,
    618,
    370,
    946,
    332,
    837,
    658,
    835,
    129,
    566,
    690,
    237,
    386,
    36,
    411,
    52,
    733,
    783,
    670,
    978,
    84,
    991,
    632,
    957,
    52,
    548,
    949,
    482,
    812,
    413,
    201,
    663,
    286,
    424,
    296,
    630,
    992,
    307,
    634,
    811,
    4,
    413,
    896,
    84,
    52,
    253,
    459,
    926,
    446,
    168,
    781,
    344,
    85,
    373,
    224,
    393,
    545,
    749,
    643,
    776,
    145,
    140,
    578,
    45,
    596,
    639,
    415,
    393,
    988,
    878,
    22,
    284,
    173,
    564,
    48,
    33,
    207,
    631,
    669,
    282,
    119,
    422,
    440,
    461,
    154,
    575,
    329,
    180,
    576,
    367,
    618,
    538,
    493,
    729,
    903,
    82,
    541,
    124,
    627,
    806,
    666,
    703,
    146,
    142,
    3,
    660,
    164,
    498,
    872,
    621,
    991,
    174,
    683,
    542,
    960,
    782,
    755,
    557,
    282,
    409,
    943,
    231,
    891,
    782,
    992,
    492,
    69,
    610,
    964,
    104,
    289,
    853,
    691,
    830,
    870,
    189,
    310,
    583,
    435,
    732,
    238,
    161,
    688,
    675,
    934,
    891,
    21,
    239,
    430,
    376,
    205,
    790,
    73,
    334,
    598,
    863,
    474,
    339,
    765,
    534,
    116,
    513,
    262,
    785,
    622,
    440,
    416,
    143,
    34,
    45,
    515,
    448,
    268,
    844,
    142,
    666,
    266,
    236,
    439,
    338,
    496,
    647,
    393,
    236,
    218,
    819,
    779,
    765,
    257,
    274,
    247,
    951,
    121,
    817,
    98,
    628,
    168,
    539,
    701,
    659,
    622,
    868,
    713,
    298,
    917,
    467,
    382,
    899,
    819,
    952,
    388,
    684,
    558,
    60,
    615,
    76,
    893,
    866,
    784,
    423,
    334,
    935,
    154,
    424,
    583,
    926,
    441,
    50,
    155,
    599,
    115,
    96,
    506,
    846,
    152,
    985,
    589,
    384,
    44,
    560,
    161,
    167,
    906,
    901,
    92,
    610,
    247,
    330,
    523,
    190,
    711,
    302,
    986,
    714,
    154,
    763,
    59,
    305,
    560,
    726,
    79,
    521,
    160,
    159,
    81,
    339,
    434,
    626,
    692,
    448,
    96,
    782,
    949,
    655,
    522,
    905,
    964,
    683,
    83,
    127,
    671,
    14,
    746,
    271,
    38,
    666,
    513,
    37,
    984,
    824,
    463,
    154,
    60,
    892,
    354,
    20,
    99,
    351,
    367,
    914,
    310,
    339,
    6,
    329,
    240,
    76,
    45,
    601,
    211,
    700,
    616,
    56,
    570,
    970,
    751,
    556,
    958,
    50,
    667,
    793,
    854,
    304,
    324,
    213,
    572,
    303,
    872,
    2,
    434,
    34,
    866,
    684,
    571,
    756,
    908,
    811,
    792,
    967,
    432,
    304,
    676,
    314,
    364,
    39,
    27,
    937,
    172,
    532,
    156,
    626,
    667,
    151,
    776,
    846,
    562,
    254,
    297,
    751,
    457,
    213,
    403,
    656,
    546,
    866,
    954,
    576,
    227,
    977,
    231,
    739,
    610,
    838,
    645,
    692,
    170,
    906,
    149,
    578,
    981,
    310,
    447,
    33,
    513,
    412,
    365,
    593,
    965,
    907,
    482,
    915,
    327,
    529,
    425,
    613,
    490,
    971,
    542,
    695,
    803,
    917,
    446,
    455,
    258,
    303,
    7,
    472,
    224,
    903,
    724,
    575,
    312,
    628,
    108,
    343,
    374,
    675,
    371,
    409,
    502,
    135,
    482,
    384,
    195,
    59,
    144,
    982,
    787,
    289,
    729,
    147,
    613,
    534,
    938,
    882,
    740,
    518,
    994,
    800,
    222,
    933,
    836,
    260,
    339,
    628,
    935,
    308,
    146,
    509,
    593,
    994,
    857,
    184,
]
ans_idx = 0


def get_next_number_indices(line: str, start_idx: int) -> Tuple[int, int]:
    if not line or start_idx == len(line) - 1:
        return (-1, -1)

    line = line[start_idx:]
    num_start_idx, num_end_idx = (-1, -1)

    for idx, val in enumerate(line):
        if val.isnumeric() and num_start_idx == -1:
            num_start_idx = idx

        if not val.isnumeric() and num_start_idx != -1 and num_end_idx == -1:
            num_end_idx = idx
            break
    else:  # if the loop didn't break
        num_end_idx = len(line)
    if num_start_idx == -1:
        return (-1, -1)
    ret_val = (num_start_idx + start_idx, num_end_idx + start_idx)
    return ret_val


def check_range_for_special_chars(line: str, start: int, end: int) -> bool:
    if not line:
        return False

    def is_special(char: str) -> bool:
        return not char.isalnum() and char != "."

    for char in line[start:end]:
        if is_special(char):
            return True

    return False


def is_valid_number(
    line_before: str, cur_line: str, next_line: str, num_start: int, num_end: int
) -> bool:
    start = num_start - 1 if num_start > 0 else num_start
    end = num_end + 1 if num_end < len(cur_line) - 1 else num_end
    r_val = False
    if check_range_for_special_chars(line_before, start, end):
        r_val = True

    if check_range_for_special_chars(cur_line, start, end):
        r_val = True

    if check_range_for_special_chars(next_line, start, end):
        r_val = True

    return r_val


def check_lines(line_before: str, cur_line: str, next_line: str) -> int:
    idx = 0
    line_sum = 0
    cnt = 0
    while idx < len(cur_line):
        global ans_idx
        cnt += 1
        if cnt >= 25:
            raise RuntimeError("")
        start, stop = get_next_number_indices(cur_line, idx)

        if start == -1:
            break

        if is_valid_number(line_before, cur_line, next_line, start, stop):
            if answers[ans_idx] != int(cur_line[start:stop]):
                raise RuntimeError(
                    f"Problem  real: {answers[ans_idx]}  mine: {cur_line[start:stop]}"
                )
            ans_idx += 1
            line_sum += int(cur_line[start:stop])

        if stop == -1:
            break

        idx = stop + 1

    return line_sum


def part1(file: Path) -> None:
    part_num_sum = 0

    all_lines: List[str] = []
    with file.open("r", encoding="utf8") as f:
        all_lines = f.readlines()

    num_lines = len(all_lines)
    for line_num, line in enumerate(all_lines):
        if line_num == 0:
            part_num_sum += check_lines("", line.strip(), all_lines[line_num + 1].strip())

        elif line_num == num_lines - 1:
            part_num_sum += check_lines(all_lines[line_num - 1].strip(), line.strip(), "")

        else:
            part_num_sum += check_lines(
                all_lines[line_num - 1].strip(), line.strip(), all_lines[line_num + 1].strip()
            )
    print(f"The sum of valid numbers for {file} is {part_num_sum}")


if __name__ == "__main__":
    # part1(Path("ex-pz-input.txt"))
    part1(Path("p1-pz-input.txt"))
